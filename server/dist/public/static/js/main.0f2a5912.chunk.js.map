{"version":3,"sources":["components/DateForm.tsx","components/ProfitTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["customStyles","option","provided","borderBottom","color","padding","commonStyle","height","DateForm","props","Form","Row","Col","Label","style","type","value","fromDate","onChange","newFromDate","toDate","newToDate","Group","styles","isMulti","isSearchable","newCurrencySelected","options","currencyList","map","currency","label","fontSize","className","ChangeShowBuyDate","ProfitTable","showBuyDate","Table","striped","bordered","hover","variant","colSpan","format","date","data","buy","sell","price","moment","time","profit","toFixed","App","useState","currencySelected","state","setState","setProfit","setShowBuyDate","useEffect","getCurrencies","getProfits","a","fetch","json","postData","split","join","method","headers","body","JSON","stringify","e","target","selected","Container","margin","checked","Object","keys","i","key","sm","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kjBAOA,IAAMA,EAAe,CACnBC,OAAQ,SAACC,GAAD,O,yVAAA,IACHA,EADG,CAENC,aAAc,kBACdC,MAAO,QACPC,QAAS,OAGPC,EAAc,CAACC,OAAQ,QAqDdC,EAnDE,SAACC,GAEhB,OACE,8BACE,kBAACC,EAAA,EAAKC,IAAN,KACA,kBAACC,EAAA,EAAD,KACA,kBAACF,EAAA,EAAKG,MAAN,kBACI,2BACEC,MAAOR,EACPS,KAAK,OACLC,MAAOP,EAAMQ,SACbC,SAAUT,EAAMU,eAEtB,kBAACP,EAAA,EAAD,KACE,kBAACF,EAAA,EAAKG,MAAN,gBACE,2BACEC,MAAOR,EACPS,KAAK,OACLC,MAAOP,EAAMW,OACbF,SAAUT,EAAMY,aAEtB,kBAACT,EAAA,EAAD,KACE,kBAACF,EAAA,EAAKY,MAAN,KACE,kBAACZ,EAAA,EAAKG,MAAN,mBACE,kBAAC,IAAD,CACEC,MAAOR,EACPiB,OAAQvB,EACRwB,SAAO,EACPC,cAAY,EACZP,SAAUT,EAAMiB,oBAChBC,QAASlB,EAAMmB,aAAaC,KAAI,SAACC,GAC/B,MAAO,CAAEd,MAAOc,EAAUC,MAAOD,UAK3C,kBAAClB,EAAA,EAAD,KACE,kBAACF,EAAA,EAAKY,MAAN,KACE,kBAACZ,EAAA,EAAKG,MAAN,CAAYC,MAAO,CAACkB,SAAU,SAA9B,iBAEA,2BAAOC,UAAU,UACf,2BAAOlB,KAAK,WAAWG,SAAUT,EAAMyB,oBACvC,0BAAMD,UAAU,uB,yCCpBbE,EAjCK,SAAC1B,GACnB,OACE,6BAEIA,EAAM2B,YACN,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BAAI,wBAAIC,QAAS,GAAIjC,EAAMqB,WAC3B,4BACE,wBAAIY,QAAS,GAAG,kBAAC,IAAD,CAAQC,OAAO,aAAaC,KAAMnC,EAAMoC,KAAKC,IAAIF,QACjE,wBAAIF,QAAS,GAAG,kBAAC,IAAD,CAAQC,OAAO,aAAaC,KAAMnC,EAAMoC,KAAKE,KAAKH,SAEpE,4BAAI,mCAAY,qCAChB,4BAAI,gCAAMnC,EAAMoC,KAAKC,IAAIE,OAAW,gCAAMvC,EAAMoC,KAAKE,KAAKC,QAC1D,4BAAI,4BAAI,kBAAC,IAAD,CAAQL,OAAO,SAASC,KAAMK,IAAOxC,EAAMoC,KAAKC,IAAII,KAAM,WAAe,4BAAI,kBAAC,IAAD,CAAQP,OAAO,UAAUC,KAAMK,IAAOxC,EAAMoC,KAAKE,KAAKG,KAAM,YACjJ,4BAAI,wBAAIR,QAAS,GAAb,YAA0BjC,EAAMoC,KAAKM,OAAOC,QAAQ,OAG5D,kBAACf,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BAAI,wBAAIC,QAAS,GAAG,kBAAC,IAAD,CAAQC,OAAO,aAAaC,KAAMnC,EAAMoC,KAAKE,KAAKH,SACtE,4BAAI,wBAAIF,QAAS,GAAIjC,EAAMqB,WAC3B,4BAAI,mCAAY,qCAChB,4BAAI,gCAAMrB,EAAMoC,KAAKC,IAAIE,OAAW,gCAAMvC,EAAMoC,KAAKE,KAAKC,QAC1D,4BAAI,4BAAI,kBAAC,IAAD,CAAQL,OAAO,SAASC,KAAMK,IAAOxC,EAAMoC,KAAKC,IAAII,KAAM,WAAe,4BAAI,kBAAC,IAAD,CAAQP,OAAO,UAAUC,KAAMK,IAAOxC,EAAMoC,KAAKE,KAAKG,KAAM,YACjJ,4BAAI,wBAAIR,QAAS,GAAb,YAA0BjC,EAAMoC,KAAKM,OAAOC,QAAQ,S,yjBCbpE,IA8GeC,EA9GO,WAAO,IAAD,EAEAC,mBAAiB,CACzCrC,SAAU,aACVG,OAAQ,aACRQ,aAAc,GACd2B,iBAAkB,KANM,mBAEnBC,EAFmB,KAEZC,EAFY,OASEH,mBAAkB,IATpB,mBASnBH,EATmB,KASXO,EATW,OAUYJ,oBAAkB,GAV9B,mBAUnBlB,EAVmB,KAUNuB,EAVM,KAY1BC,qBAAU,WACRC,MACC,IAEHD,qBAAU,WACRE,MACC,CAACN,IAGJ,IAAMK,EAAa,uCAAG,4BAAAE,EAAA,sEACEC,MAAM,mBADR,cAChBnB,EADgB,gBAEPA,EAAKoB,OAFE,OAEpBpB,EAFoB,OAGpBY,EAAS,KACJD,EADG,CAEN5B,aAAciB,EACdU,iBAAkBV,KANA,2CAAH,qDAWbiB,EAAU,uCAAG,8BAAAC,EAAA,6DACXG,EAAW,CACfjD,SAAUuC,EAAMvC,SAASkD,MAAM,KAAKC,KAAK,IACzChD,OAAQoC,EAAMpC,OAAO+C,MAAM,KAAKC,KAAK,IACrCb,iBAAkBC,EAAMD,kBAJT,SAMKS,MAAM,eAAgB,CAC1CK,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUP,KATN,cAMbrB,EANa,gBAWJA,EAAKoB,OAXD,OAWjBpB,EAXiB,OAYjBa,EAAUb,GAZO,2CAAH,qDAmBV1B,EAAW,uCAAG,WAAOuD,GAAP,SAAAX,EAAA,sDAClBN,EAAS,KAAID,EAAL,CAAYvC,SAAUyD,EAAEC,OAAO3D,SADrB,2CAAH,sDAIXK,EAAS,uCAAG,WAAOqD,GAAP,SAAAX,EAAA,sDAChBN,EAAS,KAAID,EAAL,CAAYpC,OAAQsD,EAAEC,OAAO3D,SADrB,2CAAH,sDAITU,EAAmB,uCAAG,WAAOkD,GAAP,SAAAb,EAAA,sDAE1BN,EAAS,KACJD,EADG,CAEND,iBAAkBqB,EAAS/C,KAAI,SAACC,GAC9B,OAAOA,EAASd,YALM,2CAAH,sDASzB,OACE,yBAAKiB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC4C,EAAA,EAAD,KACE,wBAAI/D,MAAO,CAACgE,OAAQ,SAApB,sBAEF,kBAACD,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,KACE,kBAAC,EAAD,CACEuB,kBA9Bc,SAACwC,GACzBf,EAAee,EAAEC,OAAOI,UA8Bd5D,YAAaA,EACbE,UAAWA,EACXJ,SAAUuC,EAAMvC,SAChBG,OAAQoC,EAAMpC,OACdQ,aAAc4B,EAAM5B,aACpBF,oBAAqBA,MAb7B,WAiBE,kBAACmD,EAAA,EAAD,KACE,kBAAClE,EAAA,EAAD,CAAKsB,UAAU,6BACd+C,OAAOC,KAAK9B,GAAQtB,KACnB,SAACC,EAAkBoD,GACjB,OACE,kBAACtE,EAAA,EAAD,CAAKuE,IAAKD,EAAGE,GAAG,KACd,kBAAC,EAAD,CACEhD,YAAaA,EACbS,KAAMM,EAAOrB,GACbA,SAAUA,aCtGVuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f2a5912.chunk.js","sourcesContent":["// Import necessary libraries\nimport React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Col from 'react-bootstrap/Col'\nimport Select from 'react-select'\nimport './slider.css'\n\nconst customStyles = {\n  option: (provided: any) => ({\n    ...provided,\n    borderBottom: '1px dotted pink',\n    color: 'black',\n    padding: 20,\n  }),\n}\nconst commonStyle = {height: '4rem'};\n// Functional component for dispaying the form\nconst DateForm = (props: any) => {\n\n  return (\n    <form>\n      <Form.Row>\n      <Col>\n      <Form.Label>From Date</Form.Label>\n          <input\n            style={commonStyle}\n            type=\"date\"\n            value={props.fromDate}\n            onChange={props.newFromDate} />\n      </Col>\n      <Col>\n        <Form.Label>To Date</Form.Label>\n          <input\n            style={commonStyle}\n            type=\"date\"\n            value={props.toDate}\n            onChange={props.newToDate} />\n      </Col>\n      <Col>\n        <Form.Group>\n          <Form.Label>Currencies</Form.Label>\n            <Select\n              style={commonStyle}\n              styles={customStyles}\n              isMulti\n              isSearchable\n              onChange={props.newCurrencySelected}\n              options={props.currencyList.map((currency: string)=>{\n                return { value: currency, label: currency }\n              })}\n            />\n        </Form.Group>\n      </Col>\n      <Col>\n        <Form.Group>\n          <Form.Label style={{fontSize: \"2rem\"}}>Show Buy Date</Form.Label>\n          {/* <Form.Check type=\"checkbox\" /> */}\n          <label className=\"switch\">\n            <input type=\"checkbox\" onChange={props.ChangeShowBuyDate}/>\n            <span className=\"slider round\"></span>\n          </label>\n        </Form.Group>\n      </Col>\n      </Form.Row>\n    </form>\n  )\n}\n// Export the component as the default object\nexport default DateForm;\n","// Import necessary libraries\nimport React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport Moment from 'react-moment'\nimport moment from 'moment'\n// Functional component for dispaying the profit data\nconst ProfitTable = (props: any) => {\n  return (\n    <div>\n    {\n        props.showBuyDate?\n        <Table striped bordered hover variant=\"dark\">\n          <tbody>\n            <tr><th colSpan={2}>{props.currency}</th></tr>\n            <tr>\n              <td colSpan={1}><Moment format=\"DD-MMMM-YY\" date={props.data.buy.date}/></td>\n              <td colSpan={1}><Moment format=\"DD-MMMM-YY\" date={props.data.sell.date}/></td>\n            </tr>\n            <tr><td>Buy</td><td>Sell</td></tr>\n            <tr><td>${props.data.buy.price}</td><td>${props.data.sell.price}</td></tr>\n            <tr><td><Moment format=\"hh:mma\" date={moment(props.data.buy.time, \"HHmm\")}/></td><td><Moment format=\"hh:mm a\" date={moment(props.data.sell.time, \"HHmm\")}/></td></tr>\n            <tr><td colSpan={2}>Profit: ${props.data.profit.toFixed(2)}</td></tr>\n          </tbody>\n        </Table>:\n        <Table striped bordered hover variant=\"dark\">\n          <tbody>\n            <tr><td colSpan={2}><Moment format=\"DD-MMMM-YY\" date={props.data.sell.date}/></td></tr>\n            <tr><th colSpan={2}>{props.currency}</th></tr>\n            <tr><td>Buy</td><td>Sell</td></tr>\n            <tr><td>${props.data.buy.price}</td><td>${props.data.sell.price}</td></tr>\n            <tr><td><Moment format=\"hh:mma\" date={moment(props.data.buy.time, \"HHmm\")}/></td><td><Moment format=\"hh:mm a\" date={moment(props.data.sell.time, \"HHmm\")}/></td></tr>\n            <tr><td colSpan={2}>Profit: ${props.data.profit.toFixed(2)}</td></tr>\n          </tbody>\n        </Table>\n    }\n    </div>\n  )\n}\n// Export the component as the default object\nexport default ProfitTable;\n","import React, {useState, useEffect} from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport './App.css';\nimport DateForm from './components/DateForm';\nimport ProfitTable from './components/ProfitTable';\n\ninterface IState {\n  fromDate: string;\n  toDate: string;\n  currencyList: string[];\n  currencySelected: string[];\n}\ninterface IProfit {\n  [key: string]: object;\n}\n\nconst App: React.FC = () => {\n\n  const [state, setState] = useState<IState>({\n    fromDate: '2018-05-07',\n    toDate: '2018-05-08',\n    currencyList: [],\n    currencySelected: []\n  })\n\n  const [profit, setProfit] = useState<IProfit>({});\n  const [showBuyDate, setShowBuyDate] = useState<boolean>(false);\n\n  useEffect(()=>{\n    getCurrencies();\n  }, [])\n\n  useEffect(()=>{\n    getProfits();\n  }, [state])\n\n  // Async function for fetching the currency name list\n  const getCurrencies = async () =>{\n    let data: any = await fetch('/api/currencies');\n    data = await data.json();\n    setState({\n      ...state,\n      currencyList: data,\n      currencySelected: data\n    })\n  }\n\n  // Async function for fetching profits for a given currency list and day interval\n  const getProfits = async () =>{\n    const postData = {\n      fromDate: state.fromDate.split('-').join(''),\n      toDate: state.toDate.split('-').join(''),\n      currencySelected: state.currencySelected\n    }\n    let data: any = await fetch('/api/profits', {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(postData), // body data type must match \"Content-Type\" header\n    });\n    data = await data.json();\n    setProfit(data)\n  }\n  // Function for handleing onChange of the Show Buy Date input field\n  const ChangeShowBuyDate = (e: any)=>{\n    setShowBuyDate(e.target.checked)\n  }\n  // Function for handleing onChange of the fromDate input field\n  const newFromDate = async (e: any)=>{\n    setState({...state, fromDate: e.target.value })\n  }\n  // Function for handleing onChange of the toDate input field\n  const newToDate = async (e: any)=>{\n    setState({...state, toDate: e.target.value })\n  }\n  // Function for handleing onChange of the currency select input field\n  const newCurrencySelected = async (selected: any)=>{\n\n    setState({\n      ...state,\n      currencySelected: selected.map((currency: {value: string, label: string})=>{\n        return currency.value\n      })\n    });\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Container>\n          <h1 style={{margin: '50px'}}>Currency Analyser</h1>\n        </Container>\n        <Container>\n          <Row>\n            <DateForm\n              ChangeShowBuyDate={ChangeShowBuyDate}\n              newFromDate={newFromDate}\n              newToDate={newToDate}\n              fromDate={state.fromDate}\n              toDate={state.toDate}\n              currencyList={state.currencyList}\n              newCurrencySelected={newCurrencySelected}\n            />\n          </Row>\n        </Container>&nbsp;&nbsp;\n        <Container>\n          <Row className=\"justify-content-md-center\">\n          {Object.keys(profit).map(\n            (currency: string, i: number)=>{\n              return(\n                <Col key={i} sm=\"4\">\n                  <ProfitTable\n                    showBuyDate={showBuyDate}\n                    data={profit[currency]}\n                    currency={currency}\n                  />\n                </Col>\n              )\n            }\n          )}\n          </Row>\n        </Container>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}